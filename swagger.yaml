openapi: 3.0.0
info:
  title: Каталог автомобилей OpenAPI спецификация
  version: 0.0.1
servers:
  - url: http://localhost:8080/
    description: Dev server
paths:
  /info:
    get:
      summary: Метод получения автомобиля по его идентификатору
      tags:
        - Car
      parameters:
        - name: regNum
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ с информацией об автомобиле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: Parameter 'regNum' is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: 'Failed to fetch car information: [error]'
  /add:
    post:
      summary: Метод добавления новых автомобилей
      tags:
        - Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                regNums:
                  type: array
                  items:
                    type: string
                  example: ["X000XX150", "Y456YY789"]
                mark:
                  type: array
                  items:
                    type: string
                  example: ["Lada", "Lada"]
                model:
                  type: array
                  items:
                    type: string
                  example: ["Vesta", "Sport"]
                year:
                  type: array
                  items:
                    type: integer
                  example: [2010, 2020]
                owner:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Сергей"
                      surname:
                        type: string
                        example: "Сидоров"
                      patronymic:
                        type: string
                        example: "Витальевич"
                    example: 
                      - name: "Сергей"
                        surname: "Сидоров"
                        patronymic: "Витальевич"
                      - name: "Антон"
                        surname: "Губин"
                        patronymic: ""
      responses:
        '200':
          description: Успешный ответ с информацией об автомобиле
          content:
            application/json:
              schema:
                type: string
                example: 'Cars added successfully'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                  type: string
                  example: 'Failed to add car: data is incomplete'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                  type: string
                  example: 'Failed to add car: [error]'
  /update:
    put:
      summary: Метод изменения одного или нескольких полей по идентификатору
      tags:
        - Car
      requestBody:
        description: Некоторые поля могут быть пустыми
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Успешный ответ с информацией об автомобиле
          content:
            application/json:
              schema:
                type: string
                example: 'Car updated successfully'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: Parameter 'regNum' is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: 'Failed to update car: [error]'
  /del:
    delete:
      summary: Метод удаления автомобиля по его индификатору 
      tags:
        - Car
      parameters:
        - name: regNum
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ с информацией об автомобиле
          content:
            application/json:
              schema:
                type: string
                example: 'Car deleted successfully'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: Parameter 'regNum' is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: 'Failed to delete car: [error]'
components:
  schemas:
    Car:
      required:
        - regNum
        - mark
        - model
        - owner
      type: object
      properties:
        regNum:
          type: string
          example: X123XX150
        mark:
          type: string
          example: Lada
        model:
          type: string
          example: Vesta
        year:
          type: integer
          example: 2002
        owner:
          $ref: '#/components/schemas/People'
    People:
      required:
        - name
        - surname
      type: object
      properties:
        name:
          type: string
          example: Сергей
        surname:
          type: string
          example: Сидоров
        patronymic:
          type: string
          example: Витальевич